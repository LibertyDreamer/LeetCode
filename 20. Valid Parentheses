/*
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

    Open brackets must be closed by the same type of brackets.
    Open brackets must be closed in the correct order.
    Every close bracket has a corresponding open bracket of the same type.

 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

 

Constraints:

    1 <= s.length <= 104
    s consists of parentheses only '()[]{}'.


*/

class Solution {
public:
    bool isValid(string s) {
        if (s.size() == 1) return false;

        std::stack<char> open;

        for(int i = 0; i < s.size(); ++i)
        {
            if(s[i] == '(' or s[i] == '{' or s[i] == '[')
            {
                open.push(s[i]);
            }
            else if(s[i] == ')' or s[i] == '}' or s[i] == ']')
            {
                if(open.size() == 0) return false;
                
                if(open.top() == '(' and s[i] == ')') open.pop();
                else if(open.top() == '{' and s[i] == '}') open.pop();
                else if(open.top() == '[' and s[i] ==']') open.pop();
                else return false;
            }
        }

        return !open.size();
    }
};
