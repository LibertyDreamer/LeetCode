/*

Given two strings s1 and s2, return true if s2 contains a
permutation
of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false

 

Constraints:

    1 <= s1.length, s2.length <= 104
    s1 and s2 consist of lowercase English letters.

*/

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if (s1.size() > s2.size())
            return false;

        int hash[26] = {0};
        for (char& ch : s1)
            hash[ch - 'a']++;

        int start = 0, end = s1.size();

        int substring_hash[26] = {0};
        for (int i = start; i < end; ++i)
            substring_hash[s2[i] - 'a']++;

        if (end - start < 26) {
            while (true) {
                bool finded = true;
                for (int i = start; i < end; ++i) {
                    if (substring_hash[s2[i] - 'a'] != hash[s2[i] - 'a']) {
                        finded = false;
                        break;
                    }
                }
                if (finded)
                    return true;

                if (end >= s2.size())
                    break;
                substring_hash[s2[start] - 'a']--;
                substring_hash[s2[end] - 'a']++;
                start++;
                end++;
            }
        }

        else {
            while (true) {
                bool finded = true;
                for (int i = 0; i < 26; ++i) {
                    if (substring_hash[i] != hash[i]) {
                        finded = false;
                        break;
                    }
                }

                if (finded)
                    return true;

                if (end >= s2.size())
                    break;
                substring_hash[s2[start] - 'a']--;
                substring_hash[s2[end] - 'a']++;
                start++;
                end++;
            }
        }

        return false;
    }
};
