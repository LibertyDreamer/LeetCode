/*

You are given an n x n integer matrix grid.

Generate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:

    maxLocal[i][j] is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1.

In other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.

Return the generated matrix.

 

Example 1:

Input: grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]
Output: [[9,9],[8,6]]
Explanation: The diagram above shows the original matrix and the generated matrix.
Notice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid.

Example 2:

Input: grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]
Output: [[2,2,2],[2,2,2],[2,2,2]]
Explanation: Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid.

*/

class Solution {
public:
    vector<vector<int>> largestLocal(vector<vector<int>>& grid) {
        const int grid_size = grid.size();
        vector<vector<int>> v(grid_size - 2, vector<int>(grid_size - 2));

        for (int i = 0; i <= grid_size - 3; ++i) {
            for (int j = 0; j <= grid_size - 3; ++j) {
                int max = 0;
                for(int k = 0; k < 3; ++k)
                {
                    for(int n = 0; n < 3; ++n)
                    {
                        if(grid[i+k][j+n] > max)
                            max = grid[i+k][j+n];
                    }
                }
                v[i][j] = max;
            }
        }
        return v;
    }
};
