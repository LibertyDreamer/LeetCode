/*
An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return the nth ugly number.

 

Example 1:

Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.

Example 2:

Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.

 

Constraints:

    1 <= n <= 1690

*/

class Solution {
public:
    int nthUglyNumber(int n) {
        int i2=0, i3=0, i5=0;

       int ugly_nums[n]; //n=7
       ugly_nums[0] = 1;

        for (int i = 1; i < n; ++i) {
            int i2_val = ugly_nums[i2] * 2;
            int i3_val = ugly_nums[i3] * 3;
            int i5_val = ugly_nums[i5] * 5;

            int next_number = std::min({i2_val,  i3_val, i5_val});
            ugly_nums[i] = next_number;

            if (i2_val == next_number) i2++;
            if (i3_val == next_number) i3++;
            if (i5_val == next_number) i5++;
        }

        return ugly_nums[n-1];
    }
};
