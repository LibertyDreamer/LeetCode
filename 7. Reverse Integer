/*

Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321

Example 2:

Input: x = -123
Output: -321

Example 3:

Input: x = 120
Output: 21

 

Constraints:

    -231 <= x <= 231 - 1

*/


class Solution {
public:
    int reverse(int x) {
        uint32_t value = 0;

        if (x < 0) {
            if(x == -2147483648) return 0;
            x *= -1;

            int first_value = 0;
            int counter = 0;
            if (x > 0) {
                value = value * 10 + (x % 10);
                x /= 10;
                first_value = value;
                counter++;
            }

            while (x > 0) {
                value = value * 10 + (x % 10);
                x /= 10;
                counter++;
            }

            if (counter > 10)
                return 0;
            if (counter == 10 and first_value > 2)
                return 0;
            if (value > INT_MAX)
                return 0;

            return value * -1;
        } else {
            int first_value = 0;
            int counter = 0;
            if (x > 0) {
                value = value * 10 + (x % 10);
                x /= 10;
                first_value = value;
                counter++;
            }

            while (x > 0) {
                value = value * 10 + (x % 10);
                x /= 10;
                counter++;
            }

            
            if (counter > 10)
                return 0;
            if (counter == 10 and first_value > 2)
                return 0;
            if (value > INT_MAX)
                return 0;

            if (value > INT_MAX)
                return 0;
            return value;
        }
    }
};
