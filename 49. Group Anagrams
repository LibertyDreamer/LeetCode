/*
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2:

Input: strs = [""]
Output: [[""]]

Example 3:

Input: strs = ["a"]
Output: [["a"]]

 

Constraints:

    1 <= strs.length <= 104
    0 <= strs[i].length <= 100
    strs[i] consists of lowercase English letters.

*/

class Solution {

public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
         std::map<std::array<uint8_t,26>, std::vector<std::string>*> m;

        vector<vector<string>> solution;
        solution.reserve(strs.size());

        for (int i = 0; i < strs.size(); ++i) {
            std::array<uint8_t,26> hash{};
            for (int j = 0; j < strs[i].size(); ++j) {
                hash[strs[i][j] - 'a']++;
            }

            if(!m.contains(hash))
            {
                solution.push_back(std::vector<std::string>({strs[i]}));

                m[hash] = &solution.back();
            }else
                m[hash]->push_back(strs[i]);
        }

        return solution;
    }
};
