/*

You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.

A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).

The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.

Implement the MyCalendar class:

    MyCalendar() Initializes the calendar object.
    boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.

 

Example 1:

Input
["MyCalendar", "book", "book", "book"]
[[], [10, 20], [15, 25], [20, 30]]
Output
[null, true, false, true]

Explanation
MyCalendar myCalendar = new MyCalendar();
myCalendar.book(10, 20); // return True
myCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.
myCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.

 

Constraints:

    0 <= start < end <= 109
    At most 1000 calls will be made to book.

*/

class MyCalendar {
    std::map<uint32_t, uint32_t> empty_date;
public:
    MyCalendar() { empty_date.emplace(std::pair<uint32_t, uint32_t>(0, 1000000002)); empty_date.emplace(std::pair<uint32_t, uint32_t>(-1, 0));}

    bool book(int start, int end) {
        std::map<uint32_t, uint32_t>::iterator d = std::prev(empty_date.upper_bound(start));
        int first = d->first;
        int second = d->second;

        if (first > start) return false;
        if (second < end - 1) return false;

        empty_date.erase(d);
       
        empty_date.emplace(std::pair<uint32_t, uint32_t>(first, start - 1));
        empty_date.emplace(std::pair<uint32_t, uint32_t>(end, second));

        return true;
    }
};



/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar* obj = new MyCalendar();
 * bool param_1 = obj->book(start,end);
 */
