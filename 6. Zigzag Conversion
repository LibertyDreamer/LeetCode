/*

The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R

And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

string convert(string s, int numRows);

 

Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"

Example 2:

Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I

Example 3:

Input: s = "A", numRows = 1
Output: "A"

 

Constraints:

    1 <= s.length <= 1000
    s consists of English letters (lower-case and upper-case), ',' and '.'.
    1 <= numRows <= 1000

*/

class Solution {
    struct uint1_t {
        uint b : 1;
    } c_c{0};
#define click_clack c_c.b
public:
    string convert(string s, int numRows) {
        if (numRows == 1)
            return s;

        std::string solution;

        int start_index = 0;

        int offsets[2] = {numRows + numRows - 2, numRows + numRows - 2};

        int offset;

        while (start_index < numRows - 1) {
            click_clack = 0;
            offset = start_index++;

            while (offset < s.size()) {
                solution.push_back(s[offset]);
                offset += offsets[click_clack++];
            }

            offsets[0] = {offsets[0] - 2};
            offsets[1] = {(numRows + numRows - 2) - offsets[0]};
        }

        offsets[0] = {numRows + numRows - 2};
        offsets[1] = {numRows + numRows - 2};
        offset = start_index;

        while (offset < s.size()) {
            solution.push_back(s[offset]);
            offset += offsets[0];
        }

        return solution;
    }
#undef click_clack
};
